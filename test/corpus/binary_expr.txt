================================================================
Arithmetic Operators
================================================================

module Main exposing (..)
    # Integer operations
    let add(x, y) = x + y
    let subtract(x, y) = x - y
    let multiply(x, y) = x * y
    let divide(x, y) = x / y
    let power(x, y) = x ** y

    # Float operations
    let add_float(x, y) = x +. y
    let subtract_float(x, y) = x -. y
    let multiply_float(x, y) = x *. y
    let divide_float(x, y) = x /. y

    # Mixed literals
    let add_int_literal(x) = x + 42
    let add_hex_literal(x) = x + 0xFF
    let add_binary_literal(x) = x + 0b1010
    let add_octal_literal(x) = x + 0o755

    # Float literals
    let add_float_literal(x) = x +. 3.14159
    let add_scientific_notation(x) = x +. 1.6e-19
    let add_exponent_only(x) = x +. 6e23

    # Unary operations
    let negate(x) = -x
    let complex_expr(x, y) = -x * y + 5
end

----------------------------------------------------------------

(source_file
  (module_declaration
    (module_path
      (upper_identifier))
    (export_list
      (expose_all))
    (line_comment)
    (statement
      (function_declaration
        (lower_identifier)
        (parameter_list
          (lower_identifier)
          (lower_identifier))
        (binary_expression
          (lower_identifier)
          (lower_identifier))))
    (statement
      (function_declaration
        (lower_identifier)
        (parameter_list
          (lower_identifier)
          (lower_identifier))
        (binary_expression
          (lower_identifier)
          (lower_identifier))))
    (statement
      (function_declaration
        (lower_identifier)
        (parameter_list
          (lower_identifier)
          (lower_identifier))
        (binary_expression
          (lower_identifier)
          (lower_identifier))))
    (statement
      (function_declaration
        (lower_identifier)
        (parameter_list
          (lower_identifier)
          (lower_identifier))
        (binary_expression
          (lower_identifier)
          (lower_identifier))))
    (statement
      (function_declaration
        (lower_identifier)
        (parameter_list
          (lower_identifier)
          (lower_identifier))
        (binary_expression
          (lower_identifier)
          (lower_identifier))))
    (line_comment)
    (statement
      (function_declaration
        (lower_identifier)
        (parameter_list
          (lower_identifier)
          (lower_identifier))
        (binary_expression
          (lower_identifier)
          (lower_identifier))))
    (statement
      (function_declaration
        (lower_identifier)
        (parameter_list
          (lower_identifier)
          (lower_identifier))
        (binary_expression
          (lower_identifier)
          (lower_identifier))))
    (statement
      (function_declaration
        (lower_identifier)
        (parameter_list
          (lower_identifier)
          (lower_identifier))
        (binary_expression
          (lower_identifier)
          (lower_identifier))))
    (statement
      (function_declaration
        (lower_identifier)
        (parameter_list
          (lower_identifier)
          (lower_identifier))
        (binary_expression
          (lower_identifier)
          (lower_identifier))))
    (line_comment)
    (statement
      (function_declaration
        (lower_identifier)
        (parameter_list
          (lower_identifier))
        (binary_expression
          (lower_identifier)
          (integer_literal))))
    (statement
      (function_declaration
        (lower_identifier)
        (parameter_list
          (lower_identifier))
        (binary_expression
          (lower_identifier)
          (integer_literal))))
    (statement
      (function_declaration
        (lower_identifier)
        (parameter_list
          (lower_identifier))
        (binary_expression
          (lower_identifier)
          (integer_literal))))
    (statement
      (function_declaration
        (lower_identifier)
        (parameter_list
          (lower_identifier))
        (binary_expression
          (lower_identifier)
          (integer_literal))))
    (line_comment)
    (statement
      (function_declaration
        (lower_identifier)
        (parameter_list
          (lower_identifier))
        (binary_expression
          (lower_identifier)
          (float_literal))))
    (statement
      (function_declaration
        (lower_identifier)
        (parameter_list
          (lower_identifier))
        (binary_expression
          (lower_identifier)
          (float_literal))))
    (statement
      (function_declaration
        (lower_identifier)
        (parameter_list
          (lower_identifier))
        (binary_expression
          (lower_identifier)
          (float_literal))))
    (line_comment)
    (statement
      (function_declaration
        (lower_identifier)
        (parameter_list
          (lower_identifier))
        (unary_expression
          (lower_identifier))))
    (statement
      (function_declaration
        (lower_identifier)
        (parameter_list
          (lower_identifier)
          (lower_identifier))
        (unary_expression
          (binary_expression
            (binary_expression
              (lower_identifier)
              (lower_identifier))
            (integer_literal)))))))

================================================================
String Concat
================================================================

module Main exposing (..)
    let concat_strings(a, b) = a <> b
end

----------------------------------------------------------------

(source_file
  (module_declaration
    (module_path
      (upper_identifier))
    (export_list
      (expose_all))
    (statement
      (function_declaration
        (lower_identifier)
        (parameter_list
          (lower_identifier)
          (lower_identifier))
        (binary_expression
          (lower_identifier)
          (lower_identifier))))))

================================================================
List Concat
================================================================

module Main exposing (..)
    let concat_lists(a, b) = a ++ b
end

----------------------------------------------------------------

(source_file
  (module_declaration
    (module_path
      (upper_identifier))
    (export_list
      (expose_all))
    (statement
      (function_declaration
        (lower_identifier)
        (parameter_list
          (lower_identifier)
          (lower_identifier))
        (binary_expression
          (lower_identifier)
          (lower_identifier))))))

================================================================
Comparison Operators
================================================================

module Main exposing (..)
    let equals(x, y) = x == y
    let not_equals(x, y) = x /= y
    let less_than(x, y) = x < y
    let less_than_equals(x, y) = x <= y
    let greater_than(x, y) = x > y
    let greater_than_equals(x, y) = x >= y
end

----------------------------------------------------------------

(source_file
  (module_declaration
    (module_path
      (upper_identifier))
    (export_list
      (expose_all))
    (statement
      (function_declaration
        (lower_identifier)
        (parameter_list
          (lower_identifier)
          (lower_identifier))
        (binary_expression
          (lower_identifier)
          (lower_identifier))))
    (statement
      (function_declaration
        (lower_identifier)
        (parameter_list
          (lower_identifier)
          (lower_identifier))
        (binary_expression
          (lower_identifier)
          (lower_identifier))))
    (statement
      (function_declaration
        (lower_identifier)
        (parameter_list
          (lower_identifier)
          (lower_identifier))
        (binary_expression
          (lower_identifier)
          (lower_identifier))))
    (statement
      (function_declaration
        (lower_identifier)
        (parameter_list
          (lower_identifier)
          (lower_identifier))
        (binary_expression
          (lower_identifier)
          (lower_identifier))))
    (statement
      (function_declaration
        (lower_identifier)
        (parameter_list
          (lower_identifier)
          (lower_identifier))
        (binary_expression
          (lower_identifier)
          (lower_identifier))))
    (statement
      (function_declaration
        (lower_identifier)
        (parameter_list
          (lower_identifier)
          (lower_identifier))
        (binary_expression
          (lower_identifier)
          (lower_identifier))))))

================================================================
Logical Operators
================================================================

module Main exposing (..)
    let logical_and(x, y) = x && y
    let logical_or(x, y) = x || y
end

----------------------------------------------------------------

(source_file
  (module_declaration
    (module_path
      (upper_identifier))
    (export_list
      (expose_all))
    (statement
      (function_declaration
        (lower_identifier)
        (parameter_list
          (lower_identifier)
          (lower_identifier))
        (binary_expression
          (lower_identifier)
          (lower_identifier))))
    (statement
      (function_declaration
        (lower_identifier)
        (parameter_list
          (lower_identifier)
          (lower_identifier))
        (binary_expression
          (lower_identifier)
          (lower_identifier))))))

================================================================
List Operations
================================================================

module Main exposing (..)
    let cons(head, tail) = head :: tail
end

----------------------------------------------------------------

(source_file
  (module_declaration
    (module_path
      (upper_identifier))
    (export_list
      (expose_all))
    (statement
      (function_declaration
        (lower_identifier)
        (parameter_list
          (lower_identifier)
          (lower_identifier))
        (binary_expression
          (lower_identifier)
          (lower_identifier))))))

================================================================
Pipeline Operator
================================================================

module Main exposing (..)
    let pipeline(x) = x |> add(5) |> multiply(2)
end

----------------------------------------------------------------

(source_file
  (module_declaration
    (module_path
      (upper_identifier))
    (export_list
      (expose_all))
    (statement
      (function_declaration
        (lower_identifier)
        (parameter_list
          (lower_identifier))
        (binary_expression
          (binary_expression
            (lower_identifier)
            (function_call
              (lower_identifier)
              (integer_literal)))
          (function_call
            (lower_identifier)
            (integer_literal)))))))

================================================================
Operator Precedence
================================================================

module Main exposing (..)
    let complex_math(x, y, z) = x * y + z / (x ** 2) - 5
    let complex_logic(a, b, c) = (a && b) || (c && a)
end

----------------------------------------------------------------

(source_file
  (module_declaration
    (module_path
      (upper_identifier))
    (export_list
      (expose_all))
    (statement
      (function_declaration
        (lower_identifier)
        (parameter_list
          (lower_identifier)
          (lower_identifier)
          (lower_identifier))
        (binary_expression
          (binary_expression
            (binary_expression
              (lower_identifier)
              (lower_identifier))
            (binary_expression
              (lower_identifier)
              (group_expression
                (binary_expression
                  (lower_identifier)
                  (integer_literal)))))
          (integer_literal))))
    (statement
      (function_declaration
        (lower_identifier)
        (parameter_list
          (lower_identifier)
          (lower_identifier)
          (lower_identifier))
        (binary_expression
          (group_expression
            (binary_expression
              (lower_identifier)
              (lower_identifier)))
          (group_expression
            (binary_expression
              (lower_identifier)
              (lower_identifier))))))))
